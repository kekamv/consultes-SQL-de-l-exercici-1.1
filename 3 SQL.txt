-- 1.1.3 Consultas sobre una tabla
-- 1.Lista el nombre de todos los productos que hay en la tabla producto.

SELECT DISTINCT nombre FROM producto;

-- 2.Lista los nombres y los precios de todos los productos de la tabla producto.

SELECT nombre, precio FROM producto;

-- 3.Lista todas las columnas de la tabla producto.

SELECT * FROM producto;

-- 4.Lista el nombre de los productos, el precio en euros y el precio en dólares estadounidenses (USD).

SELECT nombre, precio, ROUND(precio * 1.08,2) FROM producto;

-- 5.Lista el nombre de los productos, el precio en euros y el precio en dólares estadounidenses (USD). 
     Utiliza los siguientes alias para las columnas: nombre de producto, euros, dólares.

SELECT nombre AS "nombre de producto", precio AS "euros", ROUND(precio * 1.08,2) AS "dólares" FROM producto;

-- 6.Lista los nombres y los precios de todos los productos de la tabla producto, convirtiendo los nombres a mayúscula.

SELECT UPPER(nombre) AS nombre_MAY, precio FROM producto;

-- 7.Lista los nombres y los precios de todos los productos de la tabla producto, convirtiendo los nombres a minúscula.

SELECT LOWER(nombre) AS nombre_min, precio FROM producto;

-- 8. Lista el nombre de todos los fabricantes en una columna, y en otra columna obtenga en mayúsculas los dos primeros caracteres del nombre del fabricante.

SELECT nombre, UPPER(LEFT(nombre,2)) AS nombre_inicial FROM fabricante;

-- 9. Lista los nombres y los precios de todos los productos de la tabla producto, redondeando el valor del precio.

SELECT nombre, ROUND(precio,0) AS precio_INT FROM producto;

-- 10. Lista los nombres y los precios de todos los productos de la tabla producto, truncando el valor del precio para mostrarlo sin ninguna cifra decimal.

SELECT nombre, TRUNCATE(precio, 0) AS precio_INT FROM producto;

-- 11. Lista el código de los fabricantes que tienen productos en la tabla producto.

SELECT codigo_fabricante FROM producto
WHERE nombre IS NOT NULL;

-- 12. Lista el código de los fabricantes que tienen productos en la tabla producto, eliminando los códigos que aparecen repetidos.

SELECT DISTINCT codigo_fabricante FROM producto
WHERE nombre IS NOT NULL
ORDER BY codigo_fabricante ASC ;

-- 13. Lista los nombres de los fabricantes ordenados de forma ascendente.

SELECT DISTINCT nombre FROM fabricante
ORDER BY nombre ASC;

-- 14. Lista los nombres de los fabricantes ordenados de forma descendente.

SELECT DISTINCT nombre FROM fabricante
ORDER BY nombre DESC;

-- 15. Lista los nombres de los productos ordenados en primer lugar por el nombre de forma ascendente y en segundo lugar por el precio de forma descendente.

SELECT nombre, precio FROM producto
ORDER BY nombre ASC, precio DESC;

-- 16. Devuelve una lista con las 5 primeras filas de la tabla fabricante.

SELECT * FROM fabricante
LIMIT 5;

-- 17. Devuelve una lista con 2 filas a partir de la cuarta fila de la tabla fabricante. La cuarta fila también se debe incluir en la respuesta.

SELECT * FROM fabricante
LIMIT 2 OFFSET 3;

-- 18. Lista el nombre y el precio del producto más barato. (Utilice solamente las cláusulas ORDER BY y LIMIT)

SELECT nombre, precio FROM producto
ORDER BY precio ASC
LIMIT 1;

-- 19. Lista el nombre y el precio del producto más caro. (Utilice solamente las cláusulas ORDER BY y LIMIT)

SELECT nombre, precio FROM producto
ORDER BY precio DESC
LIMIT 1;

-- 20. Lista el nombre de todos los productos del fabricante cuyo código de fabricante es igual a 2.

SELECT nombre FROM producto
WHERE codigo_fabricante = 2;

-- 21. Lista el nombre de los productos que tienen un precio menor o igual a 120€.

SELECT nombre FROM producto
WHERE precio <= 120;

-- 22. Lista el nombre de los productos que tienen un precio mayor o igual a 400€.

SELECT nombre FROM producto
WHERE precio >= 400;

-- 23. Lista el nombre de los productos que no tienen un precio mayor o igual a 400€.

SELECT nombre FROM producto
WHERE precio < 400;

-- 24. Lista todos los productos que tengan un precio entre 80€ y 300€. Sin utilizar el operador BETWEEN.

SELECT * FROM producto
WHERE precio >= 80 AND precio <= 300;

-- 25. Lista todos los productos que tengan un precio entre 60€ y 200€. Utilizando el operador BETWEEN.

SELECT * FROM producto
WHERE precio BETWEEN 60 AND 200;

-- 26. Lista todos los productos que tengan un precio mayor que 200€ y que el código de fabricante sea igual a 6.

SELECT * FROM producto
WHERE precio > 200 and codigo_fabricante = 6;

-- 27. Lista todos los productos donde el código de fabricante sea 1, 3 o 5. Sin utilizar el operador IN.

SELECT * FROM producto
WHERE codigo_fabricante = 1 OR codigo_fabricante = 3 OR codigo_fabricante = 5;

-- 28. Lista todos los productos donde el código de fabricante sea 1, 3 o 5. Utilizando el operador IN.

SELECT * FROM producto
WHERE codigo_fabricante IN (1,3,5);

-- 29. Lista el nombre y el precio de los productos en céntimos (Habrá que multiplicar por 100 el valor del precio). Cree un alias para la columna que contiene el precio que se llame céntimos.

SELECT nombre, precio*100 AS céntimos FROM producto;

-- 30. Lista los nombres de los fabricantes cuyo nombre empiece por la letra S.

SELECT nombre FROM fabricante
WHERE nombre LIKE "S%";

-- 31. Lista los nombres de los fabricantes cuyo nombre termine por la vocal e.

SELECT nombre FROM fabricante
WHERE nombre LIKE "%e";

-- 32. Lista los nombres de los fabricantes cuyo nombre contenga el carácter w.

SELECT nombre FROM fabricante
WHERE nombre LIKE "%w%";

-- 33. Lista los nombres de los fabricantes cuyo nombre sea de 4 caracteres.

SELECT nombre FROM fabricante
WHERE nombre LIKE "____";

-- 34. Devuelve una lista con el nombre de todos los productos que contienen la cadena Portátil en el nombre.

SELECT nombre FROM producto
WHERE nombre LIKE "%Portátil%";

-- 35. Devuelve una lista con el nombre de todos los productos que contienen la cadena Monitor en el nombre y tienen un precio inferior a 215 €.

SELECT nombre FROM producto
WHERE nombre LIKE "%Monitor%" AND precio < 215;

-- 36. Lista el nombre y el precio de todos los productos que tengan un precio mayor o igual a 180€. Ordene el resultado en primer lugar por el precio (en orden descendente) y en segundo lugar por el nombre (en orden ascendente).

SELECT nombre, precio FROM producto
WHERE  precio >= 180
ORDER BY precio DESC, nombre ASC;


-- 1.1.4 Consultas multitabla (Composición interna)
--  Resuelva todas las consultas utilizando la sintaxis de SQL1 y SQL2.
-- 1. Devuelve una lista con el nombre del producto, precio y nombre de fabricante de todos los productos de la base de datos.

SELECT p.nombre, p.precio, f.nombre
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo;

-- 2. Devuelve una lista con el nombre del producto, precio y nombre de fabricante de todos los productos de la base de datos. Ordene el resultado por el nombre del fabricante, por orden alfabético.

SELECT p.nombre, p.precio, f.nombre
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
ORDER BY f.nombre ASC;

-- 3. Devuelve una lista con el código del producto, nombre del producto, código del fabricante y nombre del fabricante, de todos los productos de la base de datos.

SELECT p.codigo, p.nombre, p.codigo_fabricante, f.nombre
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo;

-- 4. Devuelve el nombre del producto, su precio y el nombre de su fabricante, del producto más barato.

SELECT p.nombre, p.precio, f.nombre
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
ORDER BY p.precio ASC
LIMIT 1;

-- 5. Devuelve el nombre del producto, su precio y el nombre de su fabricante, del producto más caro.

SELECT p.nombre, p.precio, f.nombre
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
ORDER BY p.precio DESC
LIMIT 1;


-- 6. Devuelve una lista de todos los productos del fabricante Lenovo.

SELECT *
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
WHERE f.codigo = 2;

-- 7. Devuelve una lista de todos los productos del fabricante Crucial que tengan un precio mayor que 200€.

SELECT *
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
WHERE f.codigo = 6 AND p.precio > 200;

-- 8. Devuelve un listado con todos los productos de los fabricantes Asus, Hewlett-Packardy Seagate. Sin utilizar el operador IN.

SELECT *
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
WHERE f.codigo = 1 OR f.codigo = 3 OR f.codigo = 5;

-- 9. Devuelve un listado con todos los productos de los fabricantes Asus, Hewlett-Packardy Seagate. Utilizando el operador IN.

SELECT *
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
WHERE f.codigo IN (1,3,5);

-- 10. Devuelve un listado con el nombre y el precio de todos los productos de los fabricantes cuyo nombre termine por la vocal e.

SELECT p.nombre, p.precio
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
WHERE f.nombre LIKE "%e";

-- 11. Devuelve un listado con el nombre y el precio de todos los productos cuyo nombre de fabricante contenga el carácter w en su nombre.

SELECT p.nombre, p.precio
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
WHERE f.nombre LIKE "%w%";

-- 12. Devuelve un listado con el nombre de producto, precio y nombre de fabricante, de todos los productos que tengan un precio mayor o igual a 180€. Ordene el resultado en primer lugar por el precio (en orden descendente) y en segundo lugar por el nombre (en orden ascendente)

SELECT p.nombre, p.precio, f.nombre
FROM producto p
	INNER JOIN fabricante f
		ON p.codigo_fabricante = f.codigo
WHERE precio >= 180
ORDER BY p.precio DESC, p.nombre ASC;

-- 13. Devuelve un listado con el código y el nombre de fabricante, solamente de aquellos fabricantes que tienen productos asociados en la base de datos.

SELECT DISTINCT f.codigo, f.nombre
FROM fabricante f
	INNER JOIN producto p
		ON f.codigo = p.codigo_fabricante
WHERE p.nombre IS NOT NULL;


-- 1.1.5 Consultas multitabla (Composición externa)--
-- Resuelva todas las consultas utilizando las cláusulas LEFT JOIN y RIGHT JOIN.
-- 1. Devuelve un listado de todos los fabricantes que existen en la base de datos, junto con los productos que tiene cada uno de ellos. El listado deberá mostrar también aquellos fabricantes que no tienen productos asociados.

SELECT DISTINCT f.codigo, f.nombre, p.nombre
FROM fabricante f
	LEFT JOIN producto p
		ON f.codigo = p.codigo_fabricante;

-- 2. Devuelve un listado donde sólo aparezcan aquellos fabricantes que no tienen ningún producto asociado.

SELECT DISTINCT f.codigo, f.nombre
FROM fabricante f
	LEFT JOIN producto p
		ON f.codigo = p.codigo_fabricante
        WHERE p.nombre IS NULL;

-- 3. ¿Pueden existir productos que no estén relacionados con un fabricante? Justifique su respuesta.

-- Dado que en la tabla productos se creó el campo codigo_fabricante como una clave externa y debe ser informada (NOT NULL), todos los productos deben estar asociados a un fabricante
-- codigo_fabricante INT UNSIGNED NOT NULL,
-- FOREIGN KEY (codigo_fabricante) REFERENCES fabricante(codigo)


-- 1.1.6 Consultas resumen
-- 1. Calcula el número total de productos que hay en la tabla productos.

SELECT COUNT(*) AS Numero_productos FROM producto;

-- 2. Calcula el número total de fabricantes que hay en la tabla fabricante.

SELECT COUNT(*) AS Numero_fabricantes FROM fabricante;

-- 3. Calcula el número de valores distintos de código de fabricante aparecen en la tabla productos.

SELECT COUNT( DISTINCT codigo_fabricante) AS suma_fabricantes FROM producto;

-- 4. Calcula la media del precio de todos los productos.

SELECT AVG(precio) AS precio_medio FROM producto;

-- 5. Calcula el precio más barato de todos los productos.

SELECT MIN(precio) FROM producto;


-- 6. Calcula el precio más caro de todos los productos.

SELECT MAX(precio) FROM producto;

-- 7. Lista el nombre y el precio del producto más barato.

SELECT nombre, precio FROM producto
WHERE precio = (SELECT MIN(precio) FROM producto);

-- 8. Lista el nombre y el precio del producto más caro.

SELECT nombre, precio FROM producto
WHERE precio = (SELECT MAX(precio) FROM producto);

-- 9. Calcula la suma de los precios de todos los productos.

SELECT SUM(precio) FROM producto;

-- 10. Calcula el número de productos que tiene el fabricante Asus.

SELECT COUNT(codigo) AS num_productos_Asus FROM producto
WHERE codigo_fabricante = (
	SELECT codigo FROM fabricante 
    WHERE nombre="Asus");

-- 11. Calcula la media del precio de todos los productos del fabricante Asus.

SELECT AVG(precio) AS precio_medio_Asus FROM producto
WHERE codigo_fabricante = (
	SELECT codigo FROM fabricante 
    WHERE nombre="Asus");


-- 12. Calcula el precio más barato de todos los productos del fabricante Asus.

SELECT MIN(precio) AS precio_min_Asus FROM producto
WHERE codigo_fabricante = (
	SELECT codigo FROM fabricante 
    WHERE nombre="Asus");

-- 13. Calcula el precio más caro de todos los productos del fabricante Asus.

SELECT MAX(precio) AS precio_max_Asus FROM producto
WHERE codigo_fabricante = (
	SELECT codigo FROM fabricante 
    WHERE nombre="Asus");

-- 14.Calcula la suma de todos los productos del fabricante Asus.

SELECT SUM(precio) AS suma_precio_Asus FROM producto
WHERE codigo_fabricante = (
	SELECT codigo FROM fabricante 
    WHERE nombre="Asus");

-- 15. Muestra el precio máximo, precio mínimo, precio medio y el número total de productos que tiene el fabricante Crucial.

SELECT MAX(precio) AS precio_max_Crucial, 
	MIN(precio) AS precio_min_Crucial, 
	AVG(precio) AS precio_medio_Crucial,
    COUNT(codigo) numero_prodcutos_Crucial FROM producto
WHERE codigo_fabricante = (
	SELECT codigo FROM fabricante 
    WHERE nombre="Crucial");

-- 16. Muestra el número total de productos que tiene cada uno de los fabricantes. El listado también debe incluir los fabricantes que no tienen ningún producto. El resultado mostrará dos columnas, una con el nombre del fabricante y otra con el número de productos que tiene. Ordene el resultado descendentemente por el número de productos.

SELECT f.nombre, COUNT(p.codigo_fabricante) AS numero_productos FROM fabricante f
LEFT JOIN producto p
	ON f.codigo = p.codigo_fabricante
GROUP BY f.codigo
ORDER BY numero_productos DESC;

-- 17. Muestra el precio máximo, precio mínimo y precio medio de los productos de cada uno de los fabricantes. El resultado mostrará el nombre del fabricante junto con los datos que se solicitan.

SELECT f.nombre, 
	MAX(p.precio) AS precio_max, 
	MIN(p.precio) AS precio_min, 
	AVG(p.precio) AS precio_medio
	FROM producto p
LEFT JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
GROUP BY f.nombre;

-- 18. Muestra el precio máximo, precio mínimo, precio medio y el número total de productos de los fabricantes que tienen un precio medio superior a 200€. No es necesario mostrar el nombre del fabricante, con el código del fabricante es suficiente.

SELECT MAX(p.precio) AS precio_max, 
	MIN(p.precio) AS precio_min, 
	AVG(p.precio) AS precio_medio,
    COUNT(p.codigo) AS numero_productos
	FROM producto p
LEFT JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
GROUP BY f.nombre
	HAVING AVG(p.precio) > 200;

-- 19. Muestra el nombre de cada fabricante, junto con el precio máximo, precio mínimo, precio medio y el número total de productos de los fabricantes que tienen un precio medio superior a 200€. Es necesario mostrar el nombre del fabricante.

SELECT f.nombre,
	MAX(p.precio) AS precio_max, 
	MIN(p.precio) AS precio_min, 
	AVG(p.precio) AS precio_medio,
    COUNT(p.codigo) AS numero_productos
	FROM producto p
LEFT JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
GROUP BY f.nombre
	HAVING AVG(p.precio) > 200;

-- 20. Calcula el número de productos que tienen un precio mayor o igual a 180€.

SELECT COUNT(codigo) AS num_productos FROM producto
WHERE precio >= 180;

-- 21. Calcula el número de productos que tiene cada fabricante con un precio mayor o igual a 180€.

SELECT f.nombre, COUNT(p.codigo) AS numero_productos_180EUR FROM producto p
LEFT JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
WHERE p.precio >= 180
GROUP BY f.nombre;

-- 22. Lista el precio medio los productos de cada fabricante, mostrando solamente el código del fabricante.

SELECT codigo_fabricante, AVG(precio) AS precio_medio FROM producto
GROUP BY codigo_fabricante;

-- 23. Lista el precio medio los productos de cada fabricante, mostrando solamente el nombre del fabricante.

SELECT f.nombre , AVG(p.precio) AS precio_medio FROM producto p
LEFT JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
GROUP BY f.nombre;

-- 24. Lista los nombres de los fabricantes cuyos productos tienen un precio medio mayor o igual a 150€.

SELECT f.nombre  FROM producto p
LEFT JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
GROUP BY f.nombre
	HAVING AVG(p.precio) >= 150;

-- 25. Devuelve un listado con los nombres de los fabricantes que tienen 2 o más productos.

SELECT f.nombre  FROM producto p
LEFT JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
GROUP BY f.nombre
	HAVING COUNT(p.codigo) >= 2;

-- 26. Devuelve un listado con los nombres de los fabricantes y el número de productos que tiene cada uno con un precio superior o igual a 220 €. No es necesario mostrar el nombre de los fabricantes que no tienen productos que cumplan la condición.
--     Ejemplo del resultado esperado:

--nombre 	total
--Lenovo	2
--Asus		1
--Crucial	1

SELECT f.nombre, COUNT(p.codigo) AS numero_productos FROM producto p
LEFT JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
WHERE p.precio >= 200
GROUP BY f.nombre
ORDER BY numero_productos DESC;

-- 27. Devuelve un listado con los nombres de los fabricantes y el número de productos que tiene cada uno con un precio superior o igual a 220 €. El listado debe mostrar el nombre de todos los fabricantes, es decir, si hay algún fabricante que no tiene productos con un precio superior o igual a 220€ deberá aparecer en el listado con un valor igual a 0 en el número de productos.
-- Ejemplo del resultado esperado:

--nombre		total
--Lenovo		2
--Crucial		1
--Asus			1
--Huawei		0
--Samsung		0
--Gigabyte		0
--Hewlett-Packard	0
--Xiaomi		0
--Seagate		0

SELECT t.nombre, SUM(
CASE WHEN t.precio >= 220 THEN 1
ELSE 0
END) AS numero
FROM (SELECT f.nombre, p.precio FROM fabricante f
	LEFT JOIN producto p
	ON f.codigo = p.codigo_fabricante) AS t
GROUP BY t.nombre
ORDER BY numero DESC;

-- 28. Devuelve un listado con los nombres de los fabricantes donde la suma del precio de todos sus productos es superior a 1000 €.

SELECT f.nombre
FROM producto p
JOIN fabricante f
	ON p.codigo_fabricante = f.codigo
GROUP BY f.nombre
	HAVING SUM(p.precio) > 1000;


-- 29. Devuelve un listado con el nombre del producto más caro que tiene cada fabricante. El resultado debe tener tres columnas: nombre del producto, precio y nombre del fabricante. El resultado tiene que estar ordenado alfabéticamente de menor a mayor por el nombre del fabricante.

SELECT t1.nombre, t1.precio_producto, f.nombre  FROM fabricante f
INNER JOIN (SELECT codigo_fabricante, nombre, MAX(precio) AS precio_producto
FROM producto
GROUP BY codigo_fabricante) AS t1
	ON f.codigo = t1.codigo_fabricante 
ORDER BY f.nombre ASC;

-- 1.1.7 Subconsultas (En la cláusula WHERE)
-- 1.1.7.1 Con operadores básicos de comparación
-- 1. Devuelve todos los productos del fabricante Lenovo. (Sin utilizar INNER JOIN).

SELECT f.nombre, p1.*  
	FROM fabricante f, (
	SELECT * FROM producto p
			WHERE p.codigo_fabricante = 2) AS p1
WHERE f.codigo = p1.codigo_fabricante;


-- 2. Devuelve todos los datos de los productos que tienen el mismo precio que el producto más caro del fabricante Lenovo. (Sin utilizar INNER JOIN).

SELECT * FROM producto
	WHERE precio = (
	SELECT MAX(p.precio) AS precio_max FROM producto p
		WHERE p.codigo_fabricante = (
			SELECT f.codigo FROM fabricante f
				WHERE f.nombre = "Lenovo")); 

-- 3. Lista el nombre del producto más caro del fabricante Lenovo.

SELECT p1.nombre FROM (
	SELECT p.nombre, MAX(p.precio), p.codigo_fabricante FROM producto p
    GROUP BY p.codigo_fabricante) AS p1
WHERE p1.codigo_fabricante = (
	SELECT f.codigo FROM fabricante f
		WHERE f.nombre = "Lenovo");

-- 4. Lista el nombre del producto más barato del fabricante Hewlett-Packard.

SELECT p1.nombre FROM (
	SELECT p.nombre, MIN(p.precio), p.codigo_fabricante FROM producto p
    GROUP BY p.codigo_fabricante) AS p1
WHERE p1.codigo_fabricante = (
	SELECT f.codigo FROM fabricante f
		WHERE f.nombre = "Hewlett-Packard");

-- 5. Devuelve todos los productos de la base de datos que tienen un precio mayor o igual al producto más caro del fabricante Lenovo.

SELECT * FROM producto 
WHERE precio >= (
	SELECT MAX(p.precio) FROM producto p
    GROUP BY p.codigo_fabricante
		HAVING p.codigo_fabricante = (
			SELECT f.codigo FROM fabricante f
			WHERE f.nombre = "Lenovo"));

-- 6. Lista todos los productos del fabricante Asus que tienen un precio superior al precio medio de todos sus productos.


SELECT *FROM producto p 
INNER JOIN (
    SELECT codigo_fabricante, AVG(precio) AS pmedio
    FROM producto
    GROUP BY codigo_fabricante) AS p1
ON p.codigo_fabricante = p1.codigo_fabricante
WHERE p.precio >= p1.pmedio
AND p.codigo_fabricante = (
	SELECT f.codigo FROM fabricante f
		WHERE f.nombre = "Asus");

SELECT * FROM producto p
	WHERE p.precio > (
		SELECT AVG(p1.precio) FROM (SELECT p.precio FROM producto p
			WHERE p.codigo_fabricante = (
				SELECT f.codigo FROM fabricante f
					WHERE f.nombre = "Asus"))AS p1)
	AND p.codigo_fabricante = (
				SELECT f.codigo FROM fabricante f
					WHERE f.nombre = "Asus");

-- 1.1.7.2 Subconsultas con ALL y ANY
-- 8. Devuelve el producto más caro que existe en la tabla producto sin hacer uso de MAX, ORDER BY ni LIMIT.

SELECT * FROM producto p 
WHERE p.precio >= ALL( 
SELECT p.precio FROM producto p);

-- 9. Devuelve el producto más barato que existe en la tabla producto sin hacer uso de MIN, ORDER BY ni LIMIT.

SELECT * FROM producto p 
WHERE p.precio <= ALL( 
SELECT p.precio FROM producto p);

-- 10. Devuelve los nombres de los fabricantes que tienen productos asociados. (Utilizando ALL o ANY).

SELECT f.nombre FROM fabricante f 
WHERE f.codigo = ANY (
SELECT p.codigo_fabricante FROM producto p
	WHERE p.codigo_fabricante IS NOT NULL);

-- 11. Devuelve los nombres de los fabricantes que no tienen productos asociados. (Utilizando ALL o ANY).

SELECT f.nombre FROM fabricante f 
WHERE f.codigo != ALL (
SELECT p.codigo_fabricante FROM producto p
	WHERE p.codigo_fabricante IS NOT NULL);

-- 1.1.7.3 Subconsultas con IN y NOT IN
-- 12. Devuelve los nombres de los fabricantes que tienen productos asociados. (Utilizando IN o NOT IN).

SELECT f.nombre FROM fabricante f 
WHERE f.codigo IN (
SELECT p.codigo_fabricante FROM producto p
	WHERE p.codigo_fabricante IS NOT NULL);

-- 13. Devuelve los nombres de los fabricantes que no tienen productos asociados. (Utilizando IN o NOT IN).

SELECT f.nombre FROM fabricante f 
WHERE f.codigo NOT IN (
SELECT p.codigo_fabricante FROM producto p
	WHERE p.codigo_fabricante IS NOT NULL);

-- 1.1.7.4 Subconsultas con EXISTS y NOT EXISTS
-- 14. Devuelve los nombres de los fabricantes que tienen productos asociados. (Utilizando EXISTS o NOT EXISTS).

SELECT f.nombre FROM fabricante f 
WHERE EXISTS (
SELECT p.codigo_fabricante FROM producto p
	WHERE p.codigo_fabricante = f.codigo);

-- 15. Devuelve los nombres de los fabricantes que no tienen productos asociados. (Utilizando EXISTS o NOT EXISTS).

SELECT f.nombre FROM fabricante f 
WHERE NOT EXISTS (
SELECT p.codigo_fabricante FROM producto p
	WHERE p.codigo_fabricante = f.codigo);

--1.1.7.5 Subconsultas correlacionadas
-- 16. Lista el nombre de cada fabricante con el nombre y el precio de su producto más caro.

SELECT f.nombre, t0.mayor_precio FROM fabricante f 
INNER JOIN (
SELECT codigo_fabricante, MAX(p.precio) AS mayor_precio FROM producto p
		GROUP BY p.codigo_fabricante) AS t0
ON t0.codigo_fabricante = f.codigo;

-- 17. Devuelve un listado de todos los productos que tienen un precio mayor o igual a la media de todos los productos de su mismo fabricante.

SELECT * FROM producto p
INNER JOIN (
SELECT codigo_fabricante, AVG(precio) AS precio_medio FROM producto
		GROUP BY codigo_fabricante) AS p0
ON p0.codigo_fabricante = p.codigo_fabricante
WHERE precio >= p0.precio_medio;

-- 18. Lista el nombre del producto más caro del fabricante Lenovo.

SELECT t0.nombre FROM (
SELECT p.nombre, MAX(p.precio) FROM producto p
GROUP BY p.codigo_fabricante
	HAVING p.codigo_fabricante = (
		SELECT f.codigo FROM fabricante f
			WHERE f.nombre = "Lenovo")) AS t0;

--1.1.8 Subconsultas (En la cláusula HAVING)
-- 7. Devuelve un listado con todos los nombres de los fabricantes que tienen el mismo número de productos que el fabricante Lenovo.

SELECT f.nombre FROM (SELECT p.codigo_fabricante, COUNT(p.codigo) AS No_producto FROM producto p
	GROUP BY p.codigo_fabricante) AS p0
INNER JOIN fabricante f
ON f.codigo = p0.codigo_fabricante
 WHERE p0.No_producto = (
	SELECT COUNT(codigo) FROM producto p 
    WHERE p.codigo_fabricante = (
		SELECT f.codigo FROM fabricante f
			WHERE f.nombre = "Lenovo")
AND f.nombre != "Lenovo");